<!doctype html>
<html>
<head>
    <title>Driftctl scan report</title>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <style>{{.Stylesheet}}</style>
</head>
<body>
<div id="app">
    <h1 class="heading title">Driftctl scan report</h1>
    <span class="heading subtitle">Coverage 8%</span>
    <span class="heading date">{{ .ScanDate }}</span>
    <hr>
    <form id="filter-form" action="#">
        <input type="text" name="resource-id-filter" placeholder="Search resources..." onkeyup="refreshState()">
        <select name="resource-type-filter" onchange="refreshState()">
            <option value="">Resource type</option>
            {{ range $type := getResourceTypes }}
            <option value="{{$type}}">{{ $type }}</option>
            {{end}}
        </select>
    </form>

    {{ if (gt (len .Managed) 0) }}
    <h2>Managed resources <span class="resource-count-managed">({{len .Managed}})</span></h2>

    {{range $res := .Managed}}
    <div class="resource-item resource-item-managed">
        <span class="resource-item-id">{{$res.TerraformId}}</span>
        <span class="resource-item-type">{{$res.TerraformType}}</span>
    </div>
    {{end}}
    {{end}}

    {{ if (gt (len .Unmanaged) 0) }}
    <h2>Unmanaged resources <span class="resource-count-unmanaged">({{len .Unmanaged}})</span></h2>

    {{range $res := .Unmanaged}}
    <div class="resource-item resource-item-unmanaged">
        <span class="resource-item-id">{{$res.TerraformId}}</span>
        <span class="resource-item-type">{{$res.TerraformType}}</span>
    </div>
    {{end}}
    {{end}}

    {{ if (gt (len .Differences) 0) }}
    <h2>Changed resources <span class="resource-count-changed">({{len .Differences}})</span></h2>

    {{range $diff := .Differences}}
    <div class="resource-item resource-item-changed">
        <span class="resource-item-id">{{$diff.Res.TerraformId}}</span>
        <span class="resource-item-type">{{$diff.Res.TerraformType}}</span>
        <div>
            {{range $change := $diff.Changelog}}
            <div>{{ formatChange $change }}</div>
            {{end}}
        </div>
    </div>
    {{end}}
    {{end}}

    {{ if (gt (len .Deleted) 0) }}
    <h2>Missing resources <span class="resource-count-deleted">({{len .Deleted}})</span></h2>

    {{range $res := .Deleted}}
    <div class="resource-item resource-item-deleted">
        <span class="resource-item-id">{{$res.TerraformId}}</span>
        <span class="resource-item-type">{{$res.TerraformType}}</span>
    </div>
    {{end}}
    {{end}}

    {{ if (gt (len .Alerts) 0) }}
    <h2>Alerts <span class="resource-count-alerts">({{len .Alerts}})</span></h2>

    {{range $type, $messages := .Alerts}}
    <div class="resource-item resource-item-alerts">
        <span class="resource-item-type">{{ $type }}</span>
        <div>
            {{range $el := $messages}}
            <div>- {{ $el.Message }}</div>
            {{end}}
        </div>
    </div>
    {{end}}
    {{end}}
</div>
</body>
<script lang="js">
    const resources = document.querySelectorAll('.resource-item')

    function hideResource(res) {
        res.classList.add('hide')
    }

    function displayResource(res) {
        res.classList.remove('hide')
    }

    function resourceIdContains(res, query) {
        const el = res.querySelector('.resource-item-id')
        if (!el) {
            return false
        }
        return el.innerText.toLowerCase().includes(query.toLowerCase())
    }

    function resourceTypeEqual(res, type) {
        const el = res.querySelector('.resource-item-type')
        if (!el) {
            return false
        }
        return el.innerText === type
    }

    function refreshCounters() {
        const counterClassMapping = {
            '.resource-item-managed': '.resource-count-managed',
            '.resource-item-unmanaged': '.resource-count-unmanaged',
            '.resource-item-changed': '.resource-count-changed',
            '.resource-item-deleted': '.resource-count-deleted',
            '.resource-item-alerts': '.resource-count-alerts',
        }

        for (const resClass in counterClassMapping) {
            const countEl = document.querySelector(counterClassMapping[resClass])
            if (!countEl){
                continue
            }
            countEl.textContent = Array.from(document.querySelectorAll(resClass)).filter(el => !el.classList.contains('hide')).length
        }
    }

    function refreshState() {
        const queryFilterInput = document.querySelector('input[name=resource-id-filter]').value
        const typeFilterInput = document.querySelector('select[name=resource-type-filter]').value

        for (const res of resources) {
            const matchId = !queryFilterInput.length || resourceIdContains(res, queryFilterInput)
            const matchType = !typeFilterInput.length || resourceTypeEqual(res, typeFilterInput)

            if (matchId && matchType) {
                displayResource(res)
                continue
            }

            hideResource(res)
        }

        refreshCounters()
    }

    refreshState()
</script>
</html>
